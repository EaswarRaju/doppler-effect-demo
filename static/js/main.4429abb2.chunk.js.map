{"version":3,"sources":["assets/star-small.png","components/drawing/drawing.js","components/drawing/drawing-utils.js","common/constants.js","common/utils.js","components/input/input.js","components/slider/slider.js","components/app/app.js","actions/app-actions.js","reducers/app-reducer.js","index.js"],"names":["module","exports","Drawing","drawingColor","colorValue","canvasRef","useRef","contextRef","imageRef","updateColor","canvas","current","clearRect","width","height","drawImage","imageData","getImageData","color","i","length","Math","min","changeColor","data","putImageData","useEffect","getContext","image","Image","src","imgSrc","onload","ref","colorConstants","translateVelocityToColor","velocity","round","abs","Input","type","value","max","label","onChange","useState","inputValue","setValue","changeValue","direction","newValue","parseFloat","isNaN","toString","includes","toFixed","props","input","target","parsedVal","parseInt","isValidInput","formattedValue","indexOf","substr","formatInput","className","onKeyDown","event","key","defaultProps","Slider","slideValue","setSlideValue","slideControlRef","sliderRef","initialX","slideControl","currentLeft","isSliding","maxSliderLeft","offsetWidth","dragStart","changedTouches","clientX","offsetLeft","getSlideValue","currentPosition","minValue","maxValue","offset","log","scale","exp","moveSlide","diff","updatedLeft","style","left","dragMove","diffX","dragEnd","handleSlideSelection","newPosition","getBoundingClientRect","x","addEventListener","document","preventDefault","getSlidePosition","App","dispatch","useDispatch","onInputChange","updateVelocity","useSelector","state","appReducer","initialState","reducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4429abb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-small.eba6df9e.png\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport imgSrc from '../../assets/star-small.png';\nimport { changeColor } from './drawing-utils';\n\nconst Drawing = ({ drawingColor, colorValue }) => {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n    const imageRef = useRef(null);\n\n    const updateColor = () => {\n        const canvas = canvasRef.current\n        contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n        contextRef.current.drawImage(imageRef.current, 0, 0);\n        const imageData = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n        changeColor(imageData.data, drawingColor, colorValue)\n        contextRef.current.putImageData(imageData, 0, 0);\n    };\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n        contextRef.current = canvas.getContext('2d');\n        const image = new Image();\n        image.src = imgSrc;\n        image.onload = () => {\n            canvas.width = image.width;\n            canvas.height = image.height;\n            imageRef.current = image;\n            updateColor();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (imageRef.current) {\n            updateColor();\n        }\n    }, [colorValue, drawingColor]);\n\n    return (\n        <canvas ref={canvasRef}></canvas>\n    );\n};\n\nDrawing.propTypes = {\n    drawingColor: PropTypes.number,\n    colorValue: PropTypes.number\n};\n\nexport default Drawing;","\nexport const changeColor = (imageData, color, colorValue) => {\n    if (colorValue) {\n        for (let i = 0; i < imageData.length; i += 4) {\n            imageData[i + color] = Math.min(imageData[i + color], 255 - colorValue);\n            imageData[i + 1] = Math.min(imageData[i + 1], 255 - colorValue);\n        }\n    }\n}","export const colorConstants = {\n    RED: 0,\n    BLUE: 2\n};\n\nexport const MIN_VELOCITY = -100;\nexport const MAX_VELOCITY = 100;","export const translateVelocityToColor = velocity => Math.round(Math.abs(255 * (velocity / 100)));\n\nexport const isValidInput = (value, min, max) => {\n    if (isNaN(value) && value !== '-') {\n        return false;\n    }\n    const parsedVal = parseInt(value, 10);\n    return value === '' || (parsedVal >= min && parsedVal <= max) || (value === '-' && min < 0);\n};\n\nexport const formatInput = value => {\n    if (value && value.includes('.') && ((value.length - value.indexOf('.')) > 3)) {\n        return value.substr(0, value.indexOf('.') + 3)\n    }\n    return value;\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { isValidInput, formatInput } from '../../common/utils';\nimport './input.scss';\n\nconst Input = ({ type, value, min = 0, max = 10, label, onChange }) => {\n    const [inputValue, setValue] = useState(value);\n\n    const onChangeHandler = (input) => {\n        const newValue = input.target.value;\n        if (type === 'text') {\n            setValue(newValue);\n            onChange(newValue);\n        } else {\n            if (isValidInput(newValue, min, max)) {\n                const formattedValue = formatInput(newValue);\n                setValue(formattedValue);\n                onChange(formattedValue);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (value !== inputValue) {\n            setValue(value);\n        }\n    }, [value])\n\n    const changeValue = direction => {\n        let newValue = parseFloat(inputValue);\n\n        if (isNaN(newValue) || newValue === '' || newValue === '-') {\n            newValue = 0;\n        }\n\n        if (direction === 'up') {\n            newValue += 1;\n        } else if (direction === 'down') {\n            newValue -= 1;\n        }\n\n        if (newValue < min) {\n            newValue = min;\n        } else if (newValue > max) {\n            newValue = max;\n        }\n\n        newValue = inputValue.toString().includes('.') ? newValue.toFixed(2) : newValue\n\n        setValue(newValue);\n        onChange(newValue);\n    };\n\n    const arrowKeysHandler = (event) => {\n        if (event.key === 'ArrowUp') {\n            changeValue('up');\n        } else if (event.key === 'ArrowDown') {\n            changeValue('down');\n        }\n    };\n\n    const props = {\n        type: 'text',\n        value: inputValue,\n        onChange: onChangeHandler\n    };\n\n    return (\n        <label className=\"input-control\">\n            {label && <span className=\"input-label\">{label}</span>}\n            <input {...props} onKeyDown={arrowKeysHandler} />\n        </label>\n    );\n};\n\nInput.propTypes = {\n    type: PropTypes.oneOf(['number', 'text']),\n    min: PropTypes.number,\n    max: PropTypes.number,\n    label: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nInput.defaultProps = {\n    type: 'text',\n    value: '',\n    onChange: () => {}\n};\n\nexport default Input;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './slider.scss';\n\nconst Slider = ({ min, max, value = 0, onChange }) => {\n    const [slideValue, setSlideValue] = useState(value);\n    const slideControlRef = useRef(null);\n    const sliderRef = useRef(null);\n\n    useEffect(() => {\n        const slideControl = slideControlRef.current;\n        let initialX;\n        let currentLeft = 0;\n        let isSliding = false;\n        const minSliderLeft = 0;\n        const maxSliderLeft = sliderRef.current.offsetWidth;\n\n        const dragStart = (event) => {\n            initialX = event.changedTouches ? event.changedTouches[0].clientX : event.clientX;\n            isSliding = true;\n            currentLeft = slideControl.offsetLeft\n        };\n\n        const getSlideValue = (currentPosition) => {\n            let minValue = min;\n            let maxValue = max;\n            let offset = 0;\n            while (minValue <= 0) {\n                minValue += 100;\n                maxValue += 100;\n                offset += 100;\n            }\n            minValue = Math.log(minValue);\n            maxValue = Math.log(maxValue);\n            const scale = (maxValue - minValue) / maxSliderLeft;\n\n            const newValue = Math.exp(minValue + scale * currentPosition);\n            return (newValue - offset).toFixed(2);\n        };\n\n        const moveSlide = diff => {\n            let updatedLeft = currentLeft + diff;\n\n            if (updatedLeft < minSliderLeft) {\n                updatedLeft = 0;\n            } else if (updatedLeft > maxSliderLeft) {\n                updatedLeft = maxSliderLeft\n            }\n\n            slideControl.style.left = updatedLeft + 'px';\n            setSlideValue(getSlideValue(updatedLeft));\n        };\n\n        const dragMove = (event) => {\n            if (isSliding) {\n                const diffX = (event.changedTouches ? event.changedTouches[0].clientX : event.clientX) - initialX;\n                moveSlide(diffX);\n            }\n        };\n\n        const stopSelection = (event) => {\n            event.preventDefault();\n            return false;\n        };\n\n        const dragEnd = () => {\n            isSliding = false;\n        };\n\n        const handleArrowKeys = (event) => {\n            if (event.key === 'ArrowLeft' || event.key === 'ArrowDown') {\n                currentLeft = slideControl.offsetLeft;\n                moveSlide(-2);\n            } else if (event.key === 'ArrowRight' || event.key === 'ArrowUp') {\n                currentLeft = slideControl.offsetLeft;\n                moveSlide(2);\n            }\n        };\n\n        const handleSlideSelection = (event) => {\n            const mousePosition = event.changedTouches ? event.changedTouches[0].clientX : event.clientX;\n            const newPosition = mousePosition - sliderRef.current.getBoundingClientRect().x;\n\n            slideControl.style.left = newPosition + 'px';\n            setSlideValue(getSlideValue(newPosition));\n        };\n\n        slideControl.addEventListener('mousedown', dragStart, false);\n        document.addEventListener('mouseup', dragEnd, false);\n        document.addEventListener('mousemove', dragMove, false);\n\n        document.addEventListener('selectstart', stopSelection, false);\n\n        slideControl.addEventListener('touchstart', dragStart, false);\n        document.addEventListener('touchend', dragEnd, false);\n        document.addEventListener('touchmove', dragMove, false);\n\n        slideControl.addEventListener('keydown', handleArrowKeys, false);\n\n        sliderRef.current.addEventListener('mousedown', handleSlideSelection, false);\n        sliderRef.current.addEventListener('touchstart', handleSlideSelection, false);\n\n    }, []);\n\n    useEffect(() => {\n        onChange(slideValue)\n    }, [slideValue]);\n\n    useEffect(() => {\n        const getSlidePosition = (newValue) => {\n            let minValue = min;\n            let maxValue = max;\n            let offset = 0;\n            while (minValue <= 0) {\n                minValue += 100;\n                maxValue += 100;\n                offset += 100;\n            }\n            minValue = Math.log(minValue);\n            maxValue = Math.log(maxValue);\n            const scale = (maxValue - minValue) / sliderRef.current.offsetWidth;\n\n            return (Math.log(parseFloat(newValue) + offset) - minValue) / scale;\n        };\n\n        const newPosition = getSlidePosition(value);\n        slideControlRef.current.style.left = newPosition + 'px';\n    }, [value]);\n\n    return (\n        <div className=\"slider\" ref={sliderRef}>\n            <button className=\"slider-control\" ref={slideControlRef} />\n        </div>\n    );\n};\n\nSlider.propTypes = {\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onChange: PropTypes.func\n};\n\nSlider.defaultProps = {\n    onChange: () => {}\n};\n\nexport default Slider;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './app.scss';\nimport Drawing from '../drawing/drawing';\nimport { colorConstants, MIN_VELOCITY, MAX_VELOCITY } from '../../common/constants';\nimport { translateVelocityToColor } from '../../common/utils';\nimport Input from '../input/input';\nimport { updateVelocity } from '../../actions/app-actions';\nimport Slider from '../slider/slider';\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    const onInputChange = value => {\n        dispatch(updateVelocity(value === '' || value === '-' ? 0 : value));\n    };\n\n    const { velocity } = useSelector(state => state.appReducer);\n\n    return (\n        <div className=\"app-container\">\n            <Drawing\n                drawingColor={velocity < 0 ? colorConstants.RED : colorConstants.BLUE}\n                colorValue={translateVelocityToColor(velocity)}\n            />\n            <div className=\"controls\">\n                <Input\n                    type=\"number\"\n                    min={MIN_VELOCITY}\n                    max={MAX_VELOCITY}\n                    label=\"Velocity (km/s)\"\n                    onChange={onInputChange}\n                    value={velocity}\n                />\n                <Slider min={MIN_VELOCITY} max={MAX_VELOCITY} onChange={onInputChange} value={velocity} />\n            </div>\n        </div>\n    );\n};\n\nexport default App;","export const UPDATE_VELOCITY = 'UPDATE_VELOCITY';\n\nexport const updateVelocity = velocity => ({\n    type: UPDATE_VELOCITY,\n    velocity\n});","import { UPDATE_VELOCITY } from \"../actions/app-actions\";\n\nconst initialState = {\n    velocity: 0\n};\n  \nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_VELOCITY: \n            return {\n                ...state,\n                velocity: action.velocity\n            };\n\n        default: return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './components/app/app';\nimport appReducer from './reducers/app-reducer';\n\nconst reducer = combineReducers({\n  appReducer\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}